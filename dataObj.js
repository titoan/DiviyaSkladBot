const XLSX = require("xlsx");

function TableInfo() {
  this.workbook = XLSX.readFile("data/dataTable.xlsx");

  this.worksheet_Instruments = this.workbook.Sheets.ready_to_sale;
  this.jsonSheet_Instruments = XLSX.utils.sheet_to_json( this.worksheet_Instruments );

  this.worksheet_Components = this.workbook.Sheets.components;
  this.jsonSheet_Components = XLSX.utils.sheet_to_json( this.worksheet_Components );

  this.worksheet_Tubes = this.workbook.Sheets.tubes;
  this.jsonSheet_Tubes = XLSX.utils.sheet_to_json( this.worksheet_Tubes );

  this.worksheet_chainTubes = this.workbook.Sheets.chain_tubes;
  this.jsonSheet_chainTubes = XLSX.utils.sheet_to_json( this.worksheet_chainTubes );

  this.testFunc = () => {}

  this.findInstrument = function (propName) {
    for (item of this.jsonSheet_Instruments) {
      if (item["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"] == propName) {
        return item;
      }
    }
  };

  this.findMaterial = function (propName) {
    for (item of this.jsonSheet_Components) {
      if (item["–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"] == propName) {
        return item;
      }
    }
  };

  this.findTubes = function(propName){
    for (item of this.jsonSheet_Tubes) {
      if (item["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"] == propName) {
        return item;
      }
    }
  }

  this.findChainTubes = function(propName){
    for (item of this.jsonSheet_chainTubes) {
      if (item["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"] == propName) {
        return item;
      }
    }
  }

  this.getInstruments = () => this.jsonSheet_Instruments.map((item) => `${item["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"]}`);
  this.getInstrumentsNumEN = () => this.jsonSheet_Instruments.map((item) => `${item["–í –Ω–∞–ª–∏—á–∏–∏ ENG"]}`);
  this.getInstrumentsNumUA = () => this.jsonSheet_Instruments.map((item) => `${item["–í –Ω–∞–ª–∏—á–∏–∏ UA"]}`);
  this.instrumentsInfoStr = function () {
    let arr = [];
    for (let i = 0; i < this.getInstruments().length; i++) {
      arr.push(
        `ü™ó ${this.getInstruments()[i]} ‚Äî ${this.getInstrumentsNumEN()[i]} / ${
          this.getInstrumentsNumUA()[i]
        } \n`
      );
    }

    return `${arr}`.replace(/[,]/g, "");
  };

  this.getTubes = () => this.jsonSheet_Tubes.map((item) => `${item["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"]}`);
  this.getTubesNum = () => this.jsonSheet_Tubes.map(item => `${item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]}`)
  this.tubesInfoStr = () => {
    let arr = [];

    this.getTubes().forEach((item, idx) => {
      arr.push(`ü™ó ${item} ‚Äî ${this.getTubesNum()[idx]}\n`)
    })

    return `${arr}`.replace(/[,]/g, "");
  }


  this.getChainTubes = () => this.jsonSheet_chainTubes.map((item) => `${item["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"]}`);
  this.getChainTubesNum = () => this.jsonSheet_chainTubes.map(item => `${item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]}`)
  this.ChainTubesInfoStr =  () => {
    let arr = [];

    this.getChainTubes().forEach((item, idx) => {
      arr.push(`üéº ${item} ‚Äî ${this.getChainTubesNum()[idx]}\n`);
    });

    return `${arr}`.replace(/[,]/g, "");
  };


  this.getComponents = () => this.jsonSheet_Components.map((item) => `${item["–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"]}`);
  this.getComponentsNum = () => this.jsonSheet_Components.map((item) => `${item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]}`);
  this.componentsInfoStr =  () => {
    let arr = [];

    this.getComponents().forEach((item, idx) => {
      arr.push(`üéº ${item} ‚Äî ${this.getComponentsNum()[idx]}\n`);
    });

    return `${arr}`.replace(/[,]/g, "");
  };


  this.addToTable_Instruments = function () {
    
    this.setLastChangeDate(this.jsonSheet_Instruments)
    
    XLSX.utils.sheet_add_json( this.worksheet_Instruments, this.jsonSheet_Instruments );

    XLSX.utils.sheet_add_aoa(this.worksheet, [["–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–í –Ω–∞–ª–∏—á–∏–∏ ENG", "–í –Ω–∞–ª–∏—á–∏–∏ UA","–ë—Ä–æ–Ω—å ENG","–ë—Ä–æ–Ω—å UA"]], { origin: "A1" })
    this.worksheet_Instruments["!cols"] = [ { wch: 20 },{ wch: 20 },{ wch: 20 },{ wch: 20 },{ wch: 20 } ]; 
    

    XLSX.writeFile(this.workbook, "data/dataTable.xlsx");
  };

  this.addTotable_Tubes = function () {
    this.setLastChangeDate(this.jsonSheet_Tubes)
    XLSX.utils.sheet_add_json( this.worksheet_Tubes, this.jsonSheet_Tubes );
    XLSX.writeFile(this.workbook, "data/dataTable.xlsx");
  }

  this.addToTable_Materials = function () {
    this.setLastChangeDate(this.jsonSheet_Components)
    XLSX.utils.sheet_add_json( this.worksheet_Components, this.jsonSheet_Components );

    this.worksheet_Components["!cols"] = [{ wch: 25 }]; // –í —Ç–µ–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ —à–∏—Ä–∏–Ω—É –≤ 25 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π

    XLSX.writeFile(this.workbook, "data/dataTable.xlsx");
  };

  this.addToTable_chainTubes = function(){
    this.setLastChangeDate(this.jsonSheet_chainTubes)
    XLSX.utils.sheet_add_json( this.worksheet_chainTubes, this.jsonSheet_chainTubes );
    XLSX.writeFile(this.workbook, "data/dataTable.xlsx");
  }

  this.writeOff_Materials = function (number, materials) {

    for(key in materials){
      let findMaterial = this.jsonSheet_Components.filter( (item) => item["–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"] == key );
      findMaterial[0]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = findMaterial[0]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] - materials[key] * number
    }    
  };

  this.setLastChangeDate = (jsonSheet) => {
    dateFild = jsonSheet.find(item => item['Date'])
    curDate = `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()} ${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`
    dateFild['Date'] = curDate
  }

  this.getLastChangeDate = (jsonSheet) => {
    try{
      return `${jsonSheet.find(item => item['Date']["Date"])}`
    }catch(err){
      if (err) throw err
    }
  } 


  this.material_standart = {
    "–ú–∏–Ω–∏–∫–æ—Ä–¥ —Å–µ—Ä—ã–π 110 —Å–º": 2,
    "–ü–∞—Ä–∞–∫–æ—Ä–¥ –±–æ—Ä–¥–æ 35 —Å–º":1,
    "–ü–∞—Ä–∞–∫–æ—Ä–¥ –±–æ—Ä–¥–æ 48 —Å–º":1,
    "–ü–ª–∞–Ω–∫–∏ –¥–µ—Ä–µ–≤–æ –ë": 1,
    "–ü–ª–∞–Ω–∫–∏ –¥–µ—Ä–µ–≤–æ –ú": 1,
    "–°—Ç–∏–∫–∏": 1,
    "–®–Ω—É—Ä —Å –∫–∞—Ä–∞–±–∏–Ω–æ–º": 1,
    "–§–ª–∏–∑–µ–ª–∏–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç": 1,
    "–ü–æ–¥—Å—Ç–∞–≤–∫–∏": 1,
    "Bag —Å—Ç–∞–Ω–¥–∞—Ä—Ç": 1
};

  this.material_ether = {
    "–ú–∏–Ω–∏–∫–æ—Ä–¥ —Å–µ—Ä—ã–π 110 —Å–º": 2,
    "–ü–∞—Ä–∞–∫–æ—Ä–¥ –±–æ—Ä–¥–æ 35 —Å–º": 1,
    "–ü–∞—Ä–∞–∫–æ—Ä–¥ –±–æ—Ä–¥–æ 48 —Å–º": 1,    
    "–ü–ª–∞–Ω–∫–∏ –¥–µ—Ä–µ–≤–æ –ë": 1,
    "–ü–ª–∞–Ω–∫–∏ –¥–µ—Ä–µ–≤–æ –ú": 1,
    "–°—Ç–∏–∫–∏": 1,
    "–®–Ω—É—Ä —Å –∫–∞—Ä–∞–±–∏–Ω–æ–º": 1,
    "–§–ª–∏–∑–µ–ª–∏–Ω –ï—Ñ–∏—Ä": 1,
    "–ü–æ–¥—Å—Ç–∞–≤–∫–∏": 1,   
    "Bag —ç—Ñ–∏—Ä": 1,
  };

  this.material_ether_acril = {
    "–ú–∏–Ω–∏–∫–æ—Ä–¥ —Å–µ—Ä—ã–π 110 —Å–º": 2,
    "–ü–∞—Ä–∞–∫–æ—Ä–¥ —Å–µ—Ä—ã–π 35 —Å–º": 1,
    "–ü–∞—Ä–∞–∫–æ—Ä–¥ —Å–µ—Ä—ã–π 48 —Å–º": 1,    
    "–ü–ª–∞–Ω–∫–∏ –∞–∫—Ä–∏–ª –ë": 1,
    "–ü–ª–∞–Ω–∫–∏ –∞–∫—Ä–∏–ª –ú": 1,
    "–°—Ç–∏–∫–∏": 1,
    "–®–Ω—É—Ä —Å –∫–∞—Ä–∞–±–∏–Ω–æ–º": 1,
    "–§–ª–∏–∑–µ–ª–∏–Ω –ï—Ñ–∏—Ä": 1,     
    "–ü–æ–¥—Å—Ç–∞–≤–∫–∏ –∞–∫—Ä–∏–ª": 1,
    "Bag —ç—Ñ–∏—Ä": 1,
  }
}

module.exports = {
  TableInfo,
};

